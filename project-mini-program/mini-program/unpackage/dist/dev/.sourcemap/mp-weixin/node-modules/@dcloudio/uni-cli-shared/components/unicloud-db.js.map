{"version":3,"sources":["webpack:///./node_modules/@dcloudio/uni-cli-shared/components/unicloud-db.vue?d50b","webpack:///./node_modules/@dcloudio/uni-cli-shared/components/unicloud-db.vue?8465","webpack:///./node_modules/@dcloudio/uni-cli-shared/components/unicloud-db.vue?89af","webpack:///./node_modules/@dcloudio/uni-cli-shared/components/unicloud-db.vue?4bf1","webpack:///node_modules/@dcloudio/uni-cli-shared/components/unicloud-db.vue?e890"],"names":["renderjs","component","options","__file","components","render","_vm","this","_h","$createElement","_self","_c","$initSSP","$scope","data","scopedSlotsCompiler","$setSSP","dataList","pagination","paginationInternal","loading","hasMore","error","errorMessage","$callSSP","recyclableRender","staticRenderFns","_withStripped","t","load","add","replace","auto","onready","manual","name","props","type","default","spaceInfo","collection","action","field","orderby","where","pageData","pageCurrent","pageSize","getcount","getone","gettree","gettreepath","startwith","limitlevel","groupby","groupField","distinct","pageIndistinct","foreignKey","loadtime","computed","collectionArgs","isLookup","created","current","size","count","attrs","al","needReset","methods","loadData","clear","callback","loadMore","refresh","reset","showToast","toastTitle","success","fail","complete","needConfirm","needLoading","loadingTitle","uni","title","db","content","showCancel","remove","confirmTitle","confirmContent","update","_doUpdate","getMainCollection","getTemp","getOptions","limitLevel","startWith","setResult","_execLoadData","_execLoadDataSuccess","result","_execLoadDataFail","console","_getExec","_execRemove","mask","exec","_id","removeData","dl","il","_dispatchEvent"],"mappings":"6JAAA,6HACIA,EADJ,QAQIC,EAAY,qBACd,aACA,YACA,sBACA,EACA,KACA,KACA,MACA,EACA,gBACAD,GAGFC,EAAUC,QAAQC,OAAS,gGACZ,aAAAF,E,0CCtBf,uQ,iCCAA,IAAIG,EAAJ,0LACA,IAAIC,EAAS,WACX,IAAIC,EAAMC,KACNC,EAAKF,EAAIG,eACJH,EAAII,MAAMC,GACnBL,EAAIM,WACwC,cAAxCN,EAAIO,OAAOC,KAAKC,qBAClBT,EAAIU,QAAQ,UAAW,CACrBd,QAASI,EAAIJ,QACbY,KAAMR,EAAIW,SACVC,WAAYZ,EAAIa,mBAChBC,QAASd,EAAIc,QACbC,QAASf,EAAIe,QACbC,MAAOhB,EAAIiB,eAGfjB,EAAIkB,YAEFC,GAAmB,EACnBC,EAAkB,GACtBrB,EAAOsB,eAAgB,G,iCCpBvB,yHAAmW,eAAG,G,uJCctW,QAGA,YAEA,GAEA,4BADAC,MAGA,GACAC,YACAP,eAEA,GACAQ,UACAC,mBAEA,GACAC,YACAC,kBACAC,iBAGA,GACA,cACA,WACA,YACA,aACA,SACA,QACA,WACA,UACA,QACA,UACA,aACA,YACA,EAEA,CACAC,kBACAC,OACAlC,SACAmC,oBACAC,mBACA,WAGAC,WACAF,YACAC,mBACA,WAGAE,YACAH,oBACAC,YAEAG,QACAJ,YACAC,YAEAI,OACAL,YACAC,YAEAK,SACAN,YACAC,YAEAM,OACAP,qBACAC,YAEAO,UACAR,YACAC,eAEAQ,aACAT,YACAC,WAEAS,UACAV,YACAC,YAEAU,UACAX,sBACAC,YAEAW,QACAZ,sBACAC,YAEAY,SACAb,6BACAC,YAEAa,aACAd,sBACAC,YAEAc,WACAf,YACAC,YAEAe,YACAhB,YACAC,YAEAgB,SACAjB,YACAC,YAEAiB,YACAlB,YACAC,YAEAkB,UACAnB,sBACAC,YAEAmB,gBACApB,sBACAC,YAEAoB,YACArB,YACAC,YAEAqB,UACAtB,YACAC,gBAEAJ,QACAG,aACAC,aAGAxB,gBACA,OACAM,WACAC,WACAJ,+BACAE,sBACAI,kBAGAqC,UACAC,0BACA,yEAEAC,oBACA,oGACA,kCAGAC,mBAAA,WACA,iBACA,yBACAC,yBACAC,mBACAC,SAGA,wBACA,SAIA,OAHAC,uBACAC,gBAEA,KACA,cAKA,GAJA,qCACA,cACA,4CAEA,uBAKA,IADA,SACA,mBACA,gBACAC,KACA,MAGA,IACA,UACA,WAGA,sBA2CA,qCACA,iBAiBAC,SACAC,uBACA,WACA,KACA,6BACA,UACA,0BACA,aAEAC,UAEA,mBAEA,gBACA,2CAEA,wBACAC,MAEA,wBACAA,KAGA,yBAEAC,oBACA,8BAIA,uBACA,kCAGA,uBAEAC,mBACA,aACA,sBAEAH,iBACA,iBACA,kBAEAI,iBACA,mCAEA9C,gBAUA,gEATAW,WAAA,IACAoC,0BACAC,eACAC,YACAC,SACAC,aAAA,IACAC,4BAAA,IACAC,4BAAA,IACAC,+BAEA,GACAC,eACAC,UAIA,iCACA,IACAC,eAGAA,gEACAR,QACA,GACAM,aACAC,kDAGA,mBACAN,QACA,GACAK,aACAG,kBACAC,mBAGA,oBACA,GACAJ,gBAEAJ,WAGAS,mBAUA,uEATAjD,WACAsC,YACAC,SACAC,aACAU,iBACAC,mBAAA,IACAV,4BAAA,IACAC,4BAAA,IACAC,+BAEA,cAGA,EAIAC,aACAC,wDACAE,4DACAC,cACAV,oBACA,WAGA,kCAXA,oCAeAc,qBAAA,uEACA,iBACApD,YACAoC,aACAC,gBACAC,aACAC,UACAC,cACAU,kBACAC,oBACAV,eACAC,eACAC,iBACA,GACA,cAYA,sBAXAC,aACAC,qEACAE,2EACAC,cACAV,oBACA,WACA,uBAQAe,0BACA,IACArD,EASAvC,EATAuC,OACAsC,EAQA7E,EARA6E,QACAC,EAOA9E,EAPA8E,KACAC,EAMA/E,EANA+E,SACAJ,EAKA3E,EALA2E,UACAC,EAIA5E,EAJA4E,WACAI,EAGAhF,EAHAgF,YACAC,EAEAjF,EAFAiF,YACAC,EACAlF,EADAkF,aAGA,GACAC,eACAC,UAIA,iCACA,IACAC,eAGAA,0EACAR,QACA,GACAM,aACAC,qDAGA,mBACAN,QACA,GACAK,aACAG,kBACAC,mBAGA,oBACA,GACAJ,gBAEAJ,WAGAc,6BACA,qCACA,qCAEA,qDACA,2BAEAC,mBAAA,mEAEA,6BAEA,cACAT,yBAGAA,+DAEA,kBACAA,iCAEA,6CACAA,uBAEA,aACAA,uBAEA,eACAA,2BAEA,kBACAA,kCAEA,oBACAA,gBAEA,eACAA,2BAGA,MAGA,wBAFAvB,YACAC,SAEA,KACA,gBACAgC,0BAEA,OACAC,2BACAC,0BAiBA,OAfA,eACAF,aAEA,mBACAA,iBAEAV,2BAEA,GACAA,eACAA,YAEAA,WAGA,GAEAa,sBACA,WACA,6BAEA,8CAGAC,4BAAA,WACA,eAGA,gBACA,qBAEA,kCACA,aACA,wCAaA,mBACA,aACA,8BAGAC,qCACA,IACAxF,EAEAyF,EAFAzF,KACAoD,EACAqC,EADArC,MAEA,uFACAA,yBACA,4BAEA,IAcA,EAdA,sCAEA,gBACA,iCAGAO,8CACA,8BAEA,wCACA,gBAEA,EACA,iBAEA,iDAIA+B,gCACA,oBACA/B,OACA,sBAEAgC,kBAGAC,oBACA,yBAEAC,sCAAA,WACA,uBAIA,6BACA,aAIA,GACAtB,eACAuB,QACAtB,UAKA,iCACA,YAEA,IACA,IACAuB,eAGAA,8CACAC,cACA,2BACA/B,eACA,uBACA,YAEA,mBAEA,mBACAC,QACA,GACAK,aACAG,kBACAC,mBAGA,oBACA,GACAJ,gBAEAJ,aAGA8B,uBAGA,IAFA,iBACA,gBACA,uBACA,0BACA,OACAC,cACAC,iBAIAC,6BACA,yBACA,kEAEA,yDAIA,c","file":"node-modules/@dcloudio/uni-cli-shared/components/unicloud-db.js","sourcesContent":["import { render, staticRenderFns, recyclableRender, components } from \"./unicloud-db.vue?vue&type=template&id=6abf80b8&\"\nvar renderjs\nimport script from \"./unicloud-db.vue?vue&type=script&lang=js&\"\nexport * from \"./unicloud-db.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../vue-cli-plugin-uni/packages/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null,\n  false,\n  components,\n  renderjs\n)\n\ncomponent.options.__file = \"HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/uni-cli-shared/components/unicloud-db.vue\"\nexport default component.exports","export * from \"-!../../vue-cli-plugin-uni/packages/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js??ref--17-0!../../webpack-uni-mp-loader/lib/template.js!../../vue-cli-plugin-uni/packages/webpack-uni-app-loader/page-meta.js!../../vue-cli-plugin-uni/packages/vue-loader/lib/index.js??vue-loader-options!../../webpack-uni-mp-loader/lib/style.js!./unicloud-db.vue?vue&type=template&id=6abf80b8&\"","var components\nvar render = function () {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  _vm.$initSSP()\n  if (_vm.$scope.data.scopedSlotsCompiler === \"augmented\") {\n    _vm.$setSSP(\"default\", {\n      options: _vm.options,\n      data: _vm.dataList,\n      pagination: _vm.paginationInternal,\n      loading: _vm.loading,\n      hasMore: _vm.hasMore,\n      error: _vm.errorMessage,\n    })\n  }\n  _vm.$callSSP()\n}\nvar recyclableRender = false\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns, recyclableRender, components }","import mod from \"-!../../../babel-loader/lib/index.js!../../vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js??ref--13-1!../../webpack-uni-mp-loader/lib/script.js!../../vue-cli-plugin-uni/packages/vue-loader/lib/index.js??vue-loader-options!../../webpack-uni-mp-loader/lib/style.js!./unicloud-db.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../babel-loader/lib/index.js!../../vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js??ref--13-1!../../webpack-uni-mp-loader/lib/script.js!../../vue-cli-plugin-uni/packages/vue-loader/lib/index.js??vue-loader-options!../../webpack-uni-mp-loader/lib/style.js!./unicloud-db.vue?vue&type=script&lang=js&\"","<template>\r\n  <view>\r\n    <slot\n      :options=\"options\"\n      :data=\"dataList\"\n      :pagination=\"paginationInternal\"\n      :loading=\"loading\"\n      :hasMore=\"hasMore\"\r\n      :error=\"errorMessage\"\n    />\r\n  </view>\r\n</template>\r\n\r\n<script>\r\nimport {\r\n  initVueI18n\r\n} from '@dcloudio/uni-i18n'\r\nimport messages from './i18n/index'\r\n\r\nconst {\r\n  t\r\n} = initVueI18n(messages)\r\n\r\nconst events = {\r\n  load: 'load',\r\n  error: 'error'\r\n}\r\nconst pageMode = {\r\n  add: 'add',\r\n  replace: 'replace'\r\n}\r\nconst loadMode = {\r\n  auto: 'auto',\r\n  onready: 'onready',\r\n  manual: 'manual'\r\n}\r\n\r\nconst attrs = [\r\n  'pageCurrent',\r\n  'pageSize',\r\n  'spaceInfo',\r\n  'collection',\r\n  'action',\r\n  'field',\r\n  'getcount',\r\n  'orderby',\r\n  'where',\r\n  'groupby',\r\n  'groupField',\r\n  'distinct'\r\n]\r\n\r\nexport default {\r\n  name: 'UniClouddb',\r\n  props: {\r\n    options: {\r\n      type: [Object, Array],\r\n      default () {\r\n        return {}\r\n      }\r\n    },\r\n    spaceInfo: {\r\n      type: Object,\r\n      default () {\r\n        return {}\r\n      }\r\n    },\r\n    collection: {\r\n      type: [String, Array],\r\n      default: ''\r\n    },\r\n    action: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    field: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    orderby: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    where: {\r\n      type: [String, Object],\r\n      default: ''\r\n    },\r\n    pageData: {\r\n      type: String,\r\n      default: 'add'\r\n    },\r\n    pageCurrent: {\r\n      type: Number,\r\n      default: 1\r\n    },\r\n    pageSize: {\r\n      type: Number,\r\n      default: 20\r\n    },\r\n    getcount: {\r\n      type: [Boolean, String],\r\n      default: false\r\n    },\r\n    getone: {\r\n      type: [Boolean, String],\r\n      default: false\r\n    },\r\n    gettree: {\r\n      type: [Boolean, String, Object],\r\n      default: false\r\n    },\r\n    gettreepath: {\r\n      type: [Boolean, String],\r\n      default: false\r\n    },\r\n    startwith: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    limitlevel: {\r\n      type: Number,\r\n      default: 10\r\n    },\r\n    groupby: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    groupField: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    distinct: {\r\n      type: [Boolean, String],\r\n      default: false\r\n    },\r\n    pageIndistinct: {\r\n      type: [Boolean, String],\r\n      default: false\r\n    },\r\n    foreignKey: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    loadtime: {\r\n      type: String,\r\n      default: 'auto'\r\n    },\r\n    manual: {\r\n      type: Boolean,\r\n      default: false\r\n    }\r\n  },\r\n  data () {\r\n    return {\r\n      loading: false,\r\n      hasMore: false,\r\n      dataList: this.getone ? undefined : [],\r\n      paginationInternal: {},\r\n      errorMessage: ''\r\n    }\r\n  },\r\n  computed: {\r\n    collectionArgs () {\r\n      return Array.isArray(this.collection) ? this.collection : [this.collection]\r\n    },\r\n    isLookup () {\r\n      return (Array.isArray(this.collection) && this.collection.length > 1) || (typeof this.collection === 'string' &&\r\n          this.collection.indexOf(',') > -1)\r\n    }\r\n  },\r\n  created () {\r\n    this._isEnded = false\r\n    this.paginationInternal = {\r\n      current: this.pageCurrent,\r\n      size: this.pageSize,\r\n      count: 0\r\n    }\r\n\r\n    this.$watch(() => {\r\n      var al = []\r\n      attrs.forEach(key => {\r\n        al.push(this[key])\r\n      })\r\n      return al\r\n    }, (newValue, oldValue) => {\r\n      this.paginationInternal.size = this.pageSize\r\n      if (newValue[0] !== oldValue[0]) {\r\n        this.paginationInternal.current = this.pageCurrent\r\n      }\r\n      if (this.loadtime === loadMode.manual) {\r\n        return\r\n      }\r\n\r\n      let needReset = false\r\n      for (let i = 2; i < newValue.length; i++) {\r\n        if (newValue[i] !== oldValue[i]) {\r\n          needReset = true\r\n          break\r\n        }\r\n      }\r\n      if (needReset) {\r\n        this.clear()\r\n        this.reset()\r\n      }\r\n\r\n      this._execLoadData()\r\n    })\r\n\r\n    // #ifdef H5\r\n    if (process.env.NODE_ENV === 'development') {\r\n      this._debugDataList = []\r\n      if (!window.unidev) {\r\n        window.unidev = {\r\n          clientDB: {\r\n            data: []\r\n          }\r\n        }\r\n      }\r\n      window.unidev.clientDB.data.push(this._debugDataList)\r\n    }\r\n    // #endif\r\n\r\n    // #ifdef MP-TOUTIAO\r\n    let changeName\r\n    const events = this.$scope.dataset.eventOpts || []\r\n    for (var i = 0; i < events.length; i++) {\r\n      const event = events[i]\r\n      if (event[0].includes('^load')) {\r\n        changeName = event[1][0][0]\r\n      }\r\n    }\r\n    if (changeName) {\r\n      let parent = this.$parent\r\n      let maxDepth = 16\r\n      this._changeDataFunction = null\r\n      while (parent && maxDepth > 0) {\r\n        const fun = parent[changeName]\r\n        if (fun && typeof fun === 'function') {\r\n          this._changeDataFunction = fun\r\n          maxDepth = 0\r\n          break\r\n        }\r\n        parent = parent.$parent\r\n        maxDepth--\r\n      }\r\n    }\r\n    // #endif\r\n\r\n    if (!this.manual && this.loadtime === loadMode.auto) {\r\n      this.loadData()\r\n    }\r\n  },\r\n  // #ifdef H5\r\n  beforeDestroy () {\r\n    if (process.env.NODE_ENV === 'development' && window.unidev) {\r\n      var cd = this._debugDataList\r\n      var dl = window.unidev.clientDB.data\r\n      for (var i = dl.length - 1; i >= 0; i--) {\r\n        if (dl[i] === cd) {\r\n          dl.splice(i, 1)\r\n          break\r\n        }\r\n      }\r\n    }\r\n  },\r\n  // #endif\r\n  methods: {\r\n    loadData (args1, args2) {\r\n      let callback = null\r\n      let clear = false\r\n      if (typeof args1 === 'object') {\r\n        if (args1.clear) {\r\n          if (this.pageData === pageMode.replace) {\r\n            this.clear()\r\n          } else {\r\n            clear = args1.clear\r\n          }\r\n          this.reset()\r\n        }\r\n        if (args1.current !== undefined) {\r\n          this.paginationInternal.current = args1.current\r\n        }\r\n        if (typeof args2 === 'function') {\r\n          callback = args2\r\n        }\r\n      } else if (typeof args1 === 'function') {\r\n        callback = args1\r\n      }\r\n\r\n      this._execLoadData(callback, clear)\r\n    },\r\n    loadMore () {\r\n      if (this._isEnded || this.loading) {\r\n        return\r\n      }\r\n\r\n      if (this.pageData === pageMode.add) {\r\n        this.paginationInternal.current++\r\n      }\r\n\r\n      this._execLoadData()\r\n    },\r\n    refresh () {\r\n      this.clear()\r\n      this._execLoadData()\r\n    },\r\n    clear () {\r\n      this._isEnded = false\r\n      this.dataList = []\r\n    },\r\n    reset () {\r\n      this.paginationInternal.current = 1\r\n    },\r\n    add (value, {\r\n      action,\r\n      showToast = true,\r\n      toastTitle,\r\n      success,\r\n      fail,\r\n      complete,\r\n      needConfirm = true,\r\n      needLoading = true,\r\n      loadingTitle = ''\r\n    } = {}) {\r\n      if (needLoading) {\r\n        uni.showLoading({\r\n          title: loadingTitle\r\n        })\r\n      }\r\n      /* eslint-disable no-undef */\r\n      let db = uniCloud.database(this.spaceInfo)\r\n      if (action) {\r\n        db = db.action(action)\r\n      }\r\n\r\n      db.collection(this.getMainCollection()).add(value).then((res) => {\r\n        success && success(res)\r\n        if (showToast) {\r\n          uni.showToast({\r\n            title: toastTitle || t('uniCloud.component.add.success')\r\n          })\r\n        }\r\n      }).catch((err) => {\r\n        fail && fail(err)\r\n        if (needConfirm) {\r\n          uni.showModal({\r\n            content: err.message,\r\n            showCancel: false\r\n          })\r\n        }\r\n      }).finally(() => {\r\n        if (needLoading) {\r\n          uni.hideLoading()\r\n        }\r\n        complete && complete()\r\n      })\r\n    },\r\n    remove (id, {\r\n      action,\r\n      success,\r\n      fail,\r\n      complete,\r\n      confirmTitle,\r\n      confirmContent,\r\n      needConfirm = true,\r\n      needLoading = true,\r\n      loadingTitle = ''\r\n    } = {}) {\r\n      if (!id || !id.length) {\r\n        return\r\n      }\r\n      if (!needConfirm) {\r\n        this._execRemove(id, action, success, fail, complete, needConfirm, needLoading, loadingTitle)\r\n        return\r\n      }\r\n      uni.showModal({\r\n        title: confirmTitle || t('uniCloud.component.remove.showModal.title'),\r\n        content: confirmContent || t('uniCloud.component.remove.showModal.content'),\r\n        showCancel: true,\r\n        success: (res) => {\r\n          if (!res.confirm) {\r\n            return\r\n          }\r\n          this._execRemove(id, action, success, fail, complete, needConfirm, needLoading, loadingTitle)\r\n        }\r\n      })\r\n    },\r\n    update (id, value, options = {}) {\r\n      const fixOptions = Object.assign({\r\n        action: null,\r\n        showToast: true,\r\n        toastTitle: null,\r\n        success: null,\r\n        fail: null,\r\n        complete: null,\r\n        confirmTitle: null,\r\n        confirmContent: null,\r\n        needConfirm: true,\r\n        needLoading: true,\r\n        loadingTitle: ''\r\n      }, options)\r\n      if (!options.needConfirm) {\r\n        uni.showModal({\r\n          title: options.confirmTitle || t('uniCloud.component.update.showModal.title'),\r\n          content: options.confirmContent || t('uniCloud.component.update.showModal.content'),\r\n          showCancel: true,\r\n          success: (res) => {\r\n            if (res.confirm) {\r\n              this._doUpdate(id, value, fixOptions)\r\n            }\r\n          }\r\n        })\r\n      } else {\r\n        this._doUpdate(id, value, fixOptions)\r\n      }\r\n    },\r\n    _doUpdate (id, value, options) {\r\n      const {\r\n        action,\r\n        success,\r\n        fail,\r\n        complete,\r\n        showToast,\r\n        toastTitle,\r\n        needConfirm,\r\n        needLoading,\r\n        loadingTitle\r\n      } = options\r\n\r\n      if (needLoading) {\r\n        uni.showLoading({\r\n          title: loadingTitle\r\n        })\r\n      }\r\n      /* eslint-disable no-undef */\r\n      let db = uniCloud.database(this.spaceInfo)\r\n      if (action) {\r\n        db = db.action(action)\r\n      }\r\n\r\n      db.collection(this.getMainCollection()).doc(id).update(value).then((res) => {\r\n        success && success(res)\r\n        if (showToast) {\r\n          uni.showToast({\r\n            title: toastTitle || t('uniCloud.component.update.success')\r\n          })\r\n        }\r\n      }).catch((err) => {\r\n        fail && fail(err)\r\n        if (needConfirm) {\r\n          uni.showModal({\r\n            content: err.message,\r\n            showCancel: false\r\n          })\r\n        }\r\n      }).finally(() => {\r\n        if (needLoading) {\r\n          uni.hideLoading()\r\n        }\r\n        complete && complete()\r\n      })\r\n    },\r\n    getMainCollection () {\r\n      if (typeof this.collection === 'string') {\r\n        return this.collection.split(',')[0]\r\n      }\r\n      const mainQuery = JSON.parse(JSON.stringify(this.collection[0]))\r\n      return mainQuery.$db[0].$param[0]\r\n    },\r\n    getTemp (isTemp = true) {\r\n      /* eslint-disable no-undef */\r\n      let db = uniCloud.database(this.spaceInfo)\r\n\r\n      if (this.action) {\r\n        db = db.action(this.action)\r\n      }\r\n\r\n      db = db.collection(...this.collectionArgs)\r\n\r\n      if (this.foreignKey) {\r\n        db = db.foreignKey(this.foreignKey)\r\n      }\r\n      if (!(!this.where || !Object.keys(this.where).length)) {\r\n        db = db.where(this.where)\r\n      }\r\n      if (this.field) {\r\n        db = db.field(this.field)\r\n      }\r\n      if (this.groupby) {\r\n        db = db.groupBy(this.groupby)\r\n      }\r\n      if (this.groupField) {\r\n        db = db.groupField(this.groupField)\r\n      }\r\n      if (this.distinct === true) {\r\n        db = db.distinct()\r\n      }\r\n      if (this.orderby) {\r\n        db = db.orderBy(this.orderby)\r\n      }\r\n\r\n      const {\r\n        current,\r\n        size\r\n      } = this.paginationInternal\r\n      const getOptions = {}\r\n      if (this.getcount) {\r\n        getOptions.getCount = this.getcount\r\n      }\r\n      const treeOptions = {\r\n        limitLevel: this.limitlevel,\r\n        startWith: this.startwith\r\n      }\r\n      if (this.gettree) {\r\n        getOptions.getTree = treeOptions\r\n      }\r\n      if (this.gettreepath) {\r\n        getOptions.getTreePath = treeOptions\r\n      }\r\n      db = db.skip(size * (current - 1)).limit(size)\r\n\r\n      if (isTemp) {\r\n        db = db.getTemp(getOptions)\r\n        db.udb = this\r\n      } else {\r\n        db = db.get(getOptions)\r\n      }\r\n\r\n      return db\r\n    },\r\n    setResult (result) {\r\n      if (result.code === 0) {\r\n        this._execLoadDataSuccess(result)\r\n      } else {\r\n        this._execLoadDataFail(new Error(result.message))\r\n      }\r\n    },\r\n    _execLoadData (callback, clear) {\r\n      if (this.loading) {\r\n        return\r\n      }\r\n      this.loading = true\r\n      this.errorMessage = ''\r\n\r\n      this._getExec().then((res) => {\r\n        this.loading = false\r\n        this._execLoadDataSuccess(res.result, callback, clear)\r\n\r\n        // #ifdef H5\r\n        if (process.env.NODE_ENV === 'development') {\r\n          this._debugDataList.length = 0\r\n          const formatData = JSON.parse(JSON.stringify(this.dataList))\r\n          if (Array.isArray(this.dataList)) {\r\n            this._debugDataList.push(...formatData)\r\n          } else {\r\n            this._debugDataList.push(formatData)\r\n          }\r\n        }\r\n        // #endif\r\n      }).catch((err) => {\r\n        this.loading = false\r\n        this._execLoadDataFail(err, callback)\r\n      })\r\n    },\r\n    _execLoadDataSuccess (result, callback, clear) {\r\n      const {\r\n        data,\r\n        count\r\n      } = result\r\n      this._isEnded = count !== undefined ? (this.paginationInternal.current * this.paginationInternal.size >=\r\n          count) : (data.length < this.pageSize)\r\n      this.hasMore = !this._isEnded\r\n\r\n      const data2 = this.getone ? (data.length ? data[0] : undefined) : data\r\n\r\n      if (this.getcount) {\r\n        this.paginationInternal.count = count\r\n      }\r\n\r\n      callback && callback(data2, this._isEnded, this.paginationInternal)\r\n      this._dispatchEvent(events.load, data2)\r\n\r\n      if (this.getone || this.pageData === pageMode.replace) {\r\n        this.dataList = data2\r\n      } else {\r\n        if (clear) {\r\n          this.dataList = data2\r\n        } else {\r\n          this.dataList.push(...data2)\r\n        }\r\n      }\r\n    },\r\n    _execLoadDataFail (err, callback) {\r\n      this.errorMessage = err\r\n      callback && callback()\r\n      this.$emit(events.error, err)\r\n      if (process.env.NODE_ENV === 'development') {\r\n        console.error(err)\r\n      }\r\n    },\r\n    _getExec () {\r\n      return this.getTemp(false)\r\n    },\r\n    _execRemove (id, action, success, fail, complete, needConfirm, needLoading, loadingTitle) {\r\n      if (!this.collection || !id) {\r\n        return\r\n      }\r\n\r\n      const ids = Array.isArray(id) ? id : [id]\r\n      if (!ids.length) {\r\n        return\r\n      }\r\n\r\n      if (needLoading) {\r\n        uni.showLoading({\r\n          mask: true,\r\n          title: loadingTitle\r\n        })\r\n      }\r\n\r\n      /* eslint-disable no-undef */\r\n      const db = uniCloud.database(this.spaceInfo)\r\n      const dbCmd = db.command\r\n\r\n      let exec = db\r\n      if (action) {\r\n        exec = exec.action(action)\r\n      }\r\n\r\n      exec.collection(this.getMainCollection()).where({\r\n        _id: dbCmd.in(ids)\r\n      }).remove().then((res) => {\r\n        success && success(res.result)\r\n        if (this.pageData === pageMode.replace) {\r\n          this.refresh()\r\n        } else {\r\n          this.removeData(ids)\r\n        }\r\n      }).catch((err) => {\r\n        fail && fail(err)\r\n        if (needConfirm) {\r\n          uni.showModal({\r\n            content: err.message,\r\n            showCancel: false\r\n          })\r\n        }\r\n      }).finally(() => {\r\n        if (needLoading) {\r\n          uni.hideLoading()\r\n        }\r\n        complete && complete()\r\n      })\r\n    },\r\n    removeData (ids) {\r\n      const il = ids.slice(0)\r\n      const dl = this.dataList\r\n      for (let i = dl.length - 1; i >= 0; i--) {\r\n        const index = il.indexOf(dl[i]._id)\r\n        if (index >= 0) {\r\n          dl.splice(i, 1)\r\n          il.splice(index, 1)\r\n        }\r\n      }\r\n    },\r\n    _dispatchEvent (type, data) {\r\n      if (this._changeDataFunction) {\r\n        this._changeDataFunction(data, this._isEnded, this.paginationInternal)\r\n      } else {\r\n        this.$emit(type, data, this._isEnded, this.paginationInternal)\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n"],"sourceRoot":""}